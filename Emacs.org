#+TITLE: Personal Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* Initial Setup
** Packages
*** straight.el
*** use-package
** Performance
*** Measure startup speed
*** Garbage collection
*** Run garbage collection when Emacs is unfocused
*** Measure RAM usage
** Anaconda
** Config files

* General Settings
** Keybindings
*** general.el
*** which-key
*** Evil
*** Avy
*** Personal Keybindings
** Editing Text
*** Indentation & whitespace
*** Settings
*** Undo Tree
*** Snippets
*** Other Small packages
** Working with projects
*** Projectile
*** Git & Magit
*** Editorconfig
*** Editing files
*** Deadgrep
** Completion
*** Ivy, counsel, swiper
*** ivy-rich
*** prescient
*** keybindings
*** company
** Help
** Time trackers
*** Wakatime
*** ActivityWatch

* UI Settings
** General Settings
*** Miscellaneous
*** Line numbers
*** Word wrapping
*** Custom frame format
*** Olivetti
*** Keycast
** Themes & colors
*** Doom themes
*** Dim inactive buffers
*** Toggle light/dark
*** ANSI colors
** Fonts
*** Frame font
*** Other fonts
*** Ligatures
*** Icons
** Text highlight
** Doom Modeline
** perspective.el
*** Functions to manage buffers
*** Automating perspectives

* Programming
** General Setup
*** Treemacs

#+begin_src emacs-lisp :tangle yes
(use-package treemacs
  :straight t
  :defer t
  :config
  ;; (setq treemacs-follow-mode nil)
  ;; (setq treemacs-follow-after-init nil)
  (setq treemacs-space-between-root-nodes nil)
  ;; (treemacs-git-mode 'extended)
  ;; (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?)
  (general-define-key
   :keymaps 'treemacs-mode-map
   [mouse-1] #'treemacs-single-click-expand-action
   "M-l" #'treemacs-root-down
   "M-h" #'treemacs-root-up
   "q" #'treemacs-quit)
  (general-define-key
   :keymaps 'treemacs-mode-map
   :states '(normal emacs)
   "q" 'treemacs-quit))

(use-package treemacs-evil
  :after (treemacs evil)
  :straight t)
#+end_src

*** LSP
**** Setup
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :straight t
  :if (not (or my/slow-ssh my/is-termux my/remote-server))
  :hook (
	 (typescript-mode . lsp)
	 (js-mode . lsp)
	 (vue-mode . lsp)
	 (go-mode . lsp)
	 (svelte-mode . lsp)
	 ;; (python-mode . lsp)
	 (json-mode . lsp)
	 (haskell-mode . lsp)
	 (haskell-literate-mode . lsp)
	 (java-mode . lsp)
	 ;; (csharp-mode . lsp)
	 )
  :commands lsp
  :init
  (setq lsp-keymap-prefix nil)
  :config
  (setq lsp-idle-delay 1)
  (setq lsp-eslint-server-command '("node" "/home/pavel/.emacs.d/.cache/lsp/eslint/unzipped/extension/server/out/eslintServer.js" "--stdio"))
  (setq lsp-eslint-run "onSave")
  (setq lsp-signature-render-documentation nil)
  ;; (lsp-headerline-breadcrumb-mode nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (add-to-list 'lsp-language-id-configuration '(svelte-mode . "svelte")))

(use-package lsp-ui
  :straight t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-delay 2)
  (setq lsp-ui-sideline-show-hover nil))
#+end_src

**** Integrations

#+begin_src emacs-lisp :tangle yes
(use-package lsp-treemacs
  :after (lsp)
  :straight t
  :commands lsp-treemacs-errors-list)
#+end_src

**** Keybindings

#+begin_src emacs-lisp :tangle yes
(my-leader-def
  :infix "l"
  "" '(:which-key "lsp")
  "d" 'lsp-ui-peek-find-definitions
  "r" 'lsp-rename
  "u" 'lsp-ui-peek-find-references
  "s" 'lsp-ui-find-workspace-symbol
  "l" 'lsp-execute-code-action
  "e" 'list-flycheck-errors)
#+end_src

*** Flycheck

#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :straight t
  :config
  (global-flycheck-mode)
  (setq flycheck-check-syntax-automatically '(save idle-buffer-switch mode-enabled))
  ;; (add-hook 'evil-insert-state-exit-hook
  ;;           (lambda ()
  ;;             (if flycheck-checker
  ;;                 (flycheck-buffer))
  ;;             ))
  (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t))
  (add-to-list 'display-buffer-alist
	       `(,(rx bos "*Flycheck errors*" eos)
		 (display-buffer-reuse-window
		  display-buffer-in-side-window)
		 (side            . bottom)
		 (reusable-frames . visible)
		 (window-height   . 0.33))))
#+end_src

*** Tree Sitter

#+begin_src emacs-lisp :tangle yes
(defun my/tree-sitter-if-not-mmm ()
  (when (not (and (boundp 'mmm-temp-buffer-name)
		  (string-equal mmm-temp-buffer-name (buffer-name))))
    (tree-sitter-mode)
    (tree-sitter-hl-mode)))

(use-package tree-sitter
  :straight t
  :hook ((typescript-mode . my/tree-sitter-if-not-mmm)
	 (js-mode . my/tree-sitter-if-not-mmm)
	 (python-mode . tree-sitter-mode)
	 (python-mode . tree-sitter-hl-mode)
	 (csharp-mode . tree-sitter-mode)))

(use-package tree-sitter-langs
  :straight t
  :after tree-sitter)
#+end_src

*** DAP
**** Setup

#+begin_src emacs-lisp :tangle yes
(use-package dap-mode
  :straight t
  :if (not (or my/remote-server my/is-termux))
  :commands (dap-debug)
  :init
  (setq lsp-enable-dap-auto-configure nil)
  :config

  (setq dap-ui-variable-length 100)
  (setq dap-auto-show-output nil)
  (require 'dap-node)
  (dap-node-setup)

  (require 'dap-chrome)
  (dap-chrome-setup)

  (require 'dap-python)
  (require 'dap-php)

  (dap-mode 1)
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (tooltip-mode 1))

#+end_src

**** Controls


#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'dap-mode
  (defmacro my/define-dap-ui-window-toggler (name)
    `(defun ,(intern (concat "my/dap-ui-toggle-" name)) ()
       ,(concat "Toggle DAP " name "buffer")
       (interactive)
       (if-let (window (get-buffer-window ,(intern (concat "dap-ui--" name "-buffer"))))
	   (quit-window nil window)
	 (,(intern (concat "dap-ui-" name))))))

  (my/define-dap-ui-window-toggler "locals")
  (my/define-dap-ui-window-toggler "expressions")
  (my/define-dap-ui-window-toggler "sessions")
  (my/define-dap-ui-window-toggler "breakpoints")
  (my/define-dap-ui-window-toggler "repl"))

#+end_src

#+begin_src emacs-lisp :tangle yes
(defhydra my/dap-hydra (:color pink :hint nil :foreign-keys run)
  "
^Stepping^         ^UI^                     ^Switch^                   ^Breakpoints^         ^Debug^                     ^Expressions
^^^^^^^^------------------------------------------------------------------------------------------------------------------------------------------
_n_: Next          _uc_: Controls           _ss_: Session              _bb_: Toggle          _dd_: Debug                 _ee_: Eval
_i_: Step in       _ue_: Expressions        _st_: Thread               _bd_: Delete          _dr_: Debug recent          _er_: Eval region
_o_: Step out      _ul_: Locals             _sf_: Stack frame          _ba_: Add             _dl_: Debug last            _es_: Eval thing at point
_c_: Continue      _ur_: REPL               _su_: Up stack frame       _bc_: Set condition   _de_: Edit debug template   _ea_: Add expression
_r_: Restart frame _uo_: Output             _sd_: Down stack frame     _bh_: Set hit count   _Q_:  Disconnect            _ed_: Remove expression
		 _us_: Sessions           _sF_: Stack frame filtered _bl_: Set log message                           _eu_: Refresh expressions
		 _ub_: Breakpoints                                                                               "

  ("n" dap-next)
  ("i" dap-step-in)
  ("o" dap-step-out)
  ("c" dap-continue)
  ("r" dap-restart-frame)
  ("uc" dap-ui-controls-mode)
  ("ue" my/dap-ui-toggle-expressions)
  ("ul" my/dap-ui-toggle-locals)
  ("ur" my/dap-ui-toggle-repl)
  ("uo" dap-go-to-output-buffer)
  ("us" my/dap-ui-toggle-sessions)
  ("ub" my/dap-ui-toggle-breakpoints)
  ("ss" dap-switch-session)
  ("st" dap-switch-thread)
  ("sf" dap-switch-stack-frame)
  ("sF" my/dap-switch-stack-frame)
  ("su" dap-up-stack-frame)
  ("sd" dap-down-stack-frame)
  ("bb" dap-breakpoint-toggle)
  ("ba" dap-breakpoint-add)
  ("bd" dap-breakpoint-delete)
  ("bc" dap-breakpoint-condition)
  ("bh" dap-breakpoint-hit-condition)
  ("bl" dap-breakpoint-log-message)
  ("dd" dap-debug)
  ("dr" dap-debug-recent)
  ("dl" dap-debug-last)
  ("de" dap-debug-edit-template)
  ("ee" dap-eval)
  ("ea" dap-ui-expressions-add)
  ("er" dap-eval-region)
  ("es" dap-eval-thing-at-point)
  ("ed" dap-ui-expressions-remove)
  ("eu" dap-ui-expressions-refresh)
  ("q" nil "quit" :color blue)
  ("Q" dap-disconnect :color red))

(my-leader-def "d" #'my/dap-hydra/body)

#+end_src

**** UI Fixes

#+begin_src emacs-lisp :tangle yes
(defvar my/dap-mode-buffer-fixed nil)

(with-eval-after-load 'dap-mode
  (defmacro my/define-dap-tree-buffer-fixer (buffer-var buffer-name)
    `(defun ,(intern (concat "my/fix-dap-ui-" buffer-name "-buffer")) (&rest _)
       (with-current-buffer ,buffer-var
	 (unless my/dap-mode-buffer-fixed
	   (toggle-truncate-lines 1)
	   (doom-modeline-set-modeline 'info)
	   (setq-local my/dap-mode-buffer-fixed t)))))

  (my/define-dap-tree-buffer-fixer dap-ui--locals-buffer "locals")
  (my/define-dap-tree-buffer-fixer dap-ui--expressions-buffer "expressions")
  (my/define-dap-tree-buffer-fixer dap-ui--sessions-buffer "sessions")
  (my/define-dap-tree-buffer-fixer dap-ui--breakpoints-buffer "breakpoints")

  (advice-add 'dap-ui-locals :after #'my/fix-dap-ui-locals-buffer)
  (advice-add 'dap-ui-expressions :after #'my/fix-dap-ui-expressions-buffer)
  (advice-add 'dap-ui-sessions :after #'my/fix-dap-ui-sessions-buffer)
  (advice-add 'dap-ui-breakpoints :after #'my/fix-dap-ui-breakpoints-buffer))
#+end_src

**** Helper functions

#+begin_src emacs-lisp :tangle yes
(defun my/clear-bad-window-parameters ()
  "Clear window parameters that interrupt my workflow."
  (interactive)
  (let ((window (get-buffer-window (current-buffer))))
    (set-window-parameter window 'no-delete-other-windows nil)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap-yank-value-at-point (node)
  (interactive (list (treemacs-node-at-point)))
  (kill-new (message (plist-get (button-get node :item) :value))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap-display-value (node)
  (interactive (list (treemacs-node-at-point)))
  (let ((value (plist-get (button-get node :item) :value)))
    (when value
      (let ((buffer (generate-new-buffer "dap-value")))
	(with-current-buffer buffer
	  (insert value))
	(select-window (display-buffer buffer))))))
#+end_src

**** Switch to stack frame with filter

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'dap-mode
  (setq my/dap-stack-frame-filters
	`(("node_modules,node:internal" . ,(rx (or "node_modules" "node:internal")))
	  ("node_modules" . ,(rx (or "node_modules")))
	  ("node:internal" . ,(rx (or "node:internal")))))

  (setq my/dap-stack-frame-current-filter (cdar my/dap-stack-frame-filters))

  (defun my/dap-stack-frame-filter-set ()
    (interactive)
    (setq my/dap-stack-frame-current-filter
	  (cdr
	   (assoc
	    (completing-read "Filter: " my/dap-stack-frame-filters)
	    my/dap-stack-frame-filters))))

  (defun my/dap-stack-frame-filter (frame)
    (when-let (path (dap--get-path-for-frame frame))
      (not (string-match my/dap-stack-frame-current-filter path)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap-switch-stack-frame ()
  "Switch stackframe by selecting another stackframe stackframes from current thread."
  (interactive)
  (when (not (dap--cur-session))
    (error "There is no active session"))

  (-if-let (thread-id (dap--debug-session-thread-id (dap--cur-session)))
      (-if-let (stack-frames
		(gethash
		 thread-id
		 (dap--debug-session-thread-stack-frames (dap--cur-session))))
	  (let* ((index 0)
		 (stack-framces-filtered
		  (-filter
		   #'my/dap-stack-frame-filter
		   stack-frames))
		 (new-stack-frame
		  (dap--completing-read
		   "Select active frame: "
		   stack-framces-filtered
		   (-lambda ((frame &as &hash "name"))
		     (if-let (frame-path (dap--get-path-for-frame frame))
			 (format "%s: %s (in %s)"
				 (cl-incf index) name frame-path)
		       (format "%s: %s" (cl-incf index) name)))
		   nil
		   t)))
	    (dap--go-to-stack-frame (dap--cur-session) new-stack-frame))
	(->> (dap--cur-session)
	     dap--debug-session-name
	     (format "Current session %s is not stopped")
	     error))
    (error "No thread is currently active %s" (dap--debug-session-name (dap--cur-session)))))
#+end_src

**** Smarter switch to stack frame

#+begin_src emacs-lisp :tangle yes
(defun my/exwm-perspective-find-buffer (path)
  "Find a buffer with PATH in all EXWM perspectives.

Returns (<buffer> . <workspace-index>) or nil."
  (let* ((buf (cl-loop for buf being buffers
		       if (and (buffer-file-name buf)
			       (f-equal-p (buffer-file-name buf) path))
		       return buf))
	 (target-workspace
	  (and buf
	       (cl-loop for frame in exwm-workspace--list
			if (with-selected-frame frame
			     (cl-loop for persp-name being the hash-keys of (perspectives-hash)
				      if (member buf (persp-buffers
						      (gethash persp-name (perspectives-hash))))
				      return persp-name))
			return (cl-position frame exwm-workspace--list)))))
    (when target-workspace (cons buf target-workspace))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/dap--go-to-stack-frame-override (debug-session stack-frame)
  "Make STACK-FRAME the active STACK-FRAME of DEBUG-SESSION."
  (with-lsp-workspace (dap--debug-session-workspace debug-session)
    (when stack-frame
      (-let* (((&hash "line" line "column" column "name" name) stack-frame)
	      (path (dap--get-path-for-frame stack-frame)))
	(setf (dap--debug-session-active-frame debug-session) stack-frame)
	;; If we have a source file with path attached, open it and
	;; position the point in the line/column referenced in the
	;; stack trace.
	(if (and path (file-exists-p path))
	    (progn
	      (let ((exwm-target (my/exwm-perspective-find-buffer path)))
		(if exwm-target
		    (progn
		      (unless (= (cdr exwm-target) exwm-workspace-current-index)
			(exwm-workspace-switch (cdr exwm-target)))
		      (persp-switch-to-buffer (car exwm-target)))
		  (select-window (get-mru-window (selected-frame) nil))
		  (find-file path)))
	      (goto-char (point-min))
	      (forward-line (1- line))
	      (forward-char column))
	  (message "No source code for %s. Cursor at %s:%s." name line column))))
    (run-hook-with-args 'dap-stack-frame-changed-hook debug-session)))

(with-eval-after-load 'exwm
  (with-eval-after-load 'dap-mode
    (advice-add #'dap--go-to-stack-frame :override #'my/dap--go-to-stack-frame-override)))

;; (advice-remove #'dap--go-to-stack-frame #'my/dap--go-to-stack-frame-override)
#+end_src

**** Debug templates

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'dap-mode
  (dap-register-debug-template
   "Node::Nest.js"
   (list :type "node"
	 :request "attach"
	 :name "Node::Attach"
	 :port 9229
	 :outFiles ["${workspaceFolder}/dist/**/*.js"]
	 :sourceMaps t
	 :program "${workspaceFolder}/src/app.ts"))
  (dap-register-debug-template
   "Node::Babel"
   (list :type "node"
	 :request "attach"
	 :name "Node::Attach"
	 :port 9229
	 :program "${workspaceFolder}/dist/bin/www.js")))

#+end_src

*** Reformatter

#+begin_src emacs-lisp :tangle yes
(use-package reformatter
  :straight t)
#+end_src

*** copilot

#+begin_src emacs-lisp :tangle yes
(defun my/copilot-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (when (my/should-run-emmet-p) (my/emmet-or-tab))
      (when (and (eq evil-state 'normal)
		 (or hs-minor-mode outline-minor-mode))
	(evil-toggle-fold)
	t)
      (indent-for-tab-command)))

(use-package copilot
  :straight (:host github :repo "SqrtMinusOne/copilot.el" :files ("dist" "*.el"))
  :commands (copilot-mode)
  :if (not (or my/remote-server my/is-termux))
  :init
  (add-hook 'prog-mode-hook #'copilot-mode)
  :config
  (setq copilot-node-executable "/home/pavel/.conda/envs/traject/bin/node")
  (general-define-key
   :keymaps 'company-active-map
   "<backtab>" #'my/copilot-tab)
  (general-define-key
   :keymaps 'copilot-mode-map
   "<tab>" #'my/copilot-tab
   "M-j" #'copilot-accept-completion-by-line
   "M-l" #'copilot-accept-completion-by-word)
  (setq copilot-lispy-integration t))
#+end_src

*** Genral additional config

#+begin_src emacs-lisp :tangle yes
(defun my/set-smartparens-indent (mode)
  (sp-local-pair mode "{" nil :post-handlers '(("|| " "SPC") ("||\n[i]" "RET")))
  (sp-local-pair mode "[" nil :post-handlers '(("|| " "SPC") ("||\n[i]" "RET")))
  (sp-local-pair mode "(" nil :post-handlers '(("|| " "SPC") ("||\n[i]" "RET"))))
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/set-flycheck-eslint()
  "Override flycheck checker with eslint."
  (setq-local lsp-diagnostic-package :none)
  (setq-local flycheck-checker 'javascript-eslint))
#+end_src

** Web Development
*** Emmet
*** Prettier
*** TypeScript
*** JavaScript
*** Jest
*** web-mode
*** SCSS
*** PHP
** LaTeX
*** AUCTex
*** Import *.sty
*** Snippets
** Markup & natural languages
*** Markdown
*** PlantUML
*** Subtitles
*** LTex
*** LanguageTool
*** Reverso
** Lisp
*** Meta Lisp
*** Emacs Lisp
*** Common Lisp
*** Clojure
*** Hy
*** Scheme
*** CLIPS
** Python
*** ein
*** pyright
*** pipenv
*** OFF (OFF) yapf
*** black
*** isort
*** sphinx-doc
*** pytest
*** code-cells
*** tensorboard
** Data Serialization
*** JSON
*** CSV
*** YAML
** Configuration
*** .env
*** .gitignore
*** Docker
*** Jenkins
*** crontab
*** nginx
** Shell
*** sh
*** zsh
** Query languages
*** SQL
*** SPARQL
*** GraphQL
** Documents
*** DocView
** x509
** Java
** Go
** .NET
*** C#
*** MSBuild
** nix
** Lua

* Org Mode
** Installation & basic settings
*** Encryption
*** org-contrib
*** ol-notmuch
*** org-tempo
*** evil-org
** Literate programming
*** Python & Jupyter
*** Hy
*** View HTML in browser
*** PlantUML
*** Restclient
*** Setup
*** Managing Jupyter kernels
*** Output post-processing
*** Executing stuff
*** Managing a literate programming project
** Tools
*** Presentations
*** TOC
*** Screenshots
*** Transclusion
*** Drawing
*** Managing tables
** Productivity & Knowledge management
*** Org Agenda & Project Management
*** Org Journal
*** Bibliography
*** Org Roam
*** Review workflow
*** Contacts
*** Calendar view
** UI
*** OFF (OFF) Instant equations preview
*** LaTeX fragments
*** Better headers
*** Override colors
** Export
*** Hugo
*** Jupyter Notebook
*** Html export
*** LaTeX
** Keybindings & stuff
*** General keybindings
*** Copy a link
*** Navigating source blocks
*** Open a file from org-directory

* Applications
** Dired
*** Basic config & keybindings
*** Addons
*** Subdirectories
*** TRAMP
*** Bookmarks
** Shells
*** vterm
*** eshell
*** shell
** Elfeed
*** General settings
*** Some additions
*** Custom faces
*** elfeed-summary
*** elfeed-sync
*** YouTube, podcasts & EMMS
*** rdrview
*** LaTeX and pandoc
*** YouTube transcripts
*** Podcast transcripts
** Reading Documentation
*** tldr
*** man & info
*** devdocs.io
*** StackExchange
** Utilities
*** pass
*** Docker
*** Progidy
*** screenshot.el
*** proced
*** Atomic Chrome
*** Pinentry
** Productivity
*** pomm
*** hledger
*** Calendar
** Fun
*** Snow
*** Power mode
*** Redacted
*** Zone
