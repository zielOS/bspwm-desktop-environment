;; Network
(defpoll network-status :interval "1m" "cat /sys/class/net/e*/operstate")

;; Workspaces
(defpoll layout-status		:interval "1s" "bsp-layout get")
(defpoll focused-desktop	:interval "1s" "bspc query -D -d focused --names")
(deflisten workspaces			"workspaces")
(deflisten windowtitle		"xtitle -s | stdbuf -oL -eL uniq | cat")

;; Powemenu
(defpoll profile-name	:interval "24h" "details --name")
(defpoll uptime				:interval "1m" "uptime -p | sed -e 's/up //g'")

;; Weather
(defpoll weather-icon			:interval "1h" "weather --icon")
(defpoll weather-temp			:interval "1h" "weather --temp")
(defpoll weather-desc			:interval "1h" "weather --desc")
(defpoll weather-city			:interval "1h" "weather --city")
(deflisten weather-color	"weather --hex")

(defwidget powermenu-icon []
	(eventbox
		:cursor "pointer"
		(button 
			:class "power-icon" 
			:valign "center"
      :onclick "eww -c $HOME/.config/eww/dashboard open --toggle powermenu"  
			""
		)
	)
)

(defwidget layout [icon set reset]
	(eventbox
		:cursor "pointer"
		(button 
			:class "layout-button" 
			:onclick set
			:onmiddleclick reset
			icon
		)
	)
)

(defwidget bsp-layout []
	(box
		:class "layout-button-box" 
		(layout
			:icon {layout-status == "rtall" ? "" : 
			layout-status == "grid" ? "" :
			layout-status == "tiled" ? "" :
			layout-status == "wide" ? "" : ""}
			:set "bsp-layout next --layouts rtall,wide,grid,tiled --master-size 40 --desktop ${focused-desktop}"
			:reset "bsp-layout set tiled ${focused-desktop}"
		)
	)
)

(defwidget workspaces []
	(literal
		:content workspaces
	)
)

(defwidget windowtitle []
	(label
		:class "windowtitle"
		:limit-width 30
		:text windowtitle
	)
)

(defwidget updates []
	(eventbox 
		:onhover "eww update updates-rev=true" 
		:onhoverlost "eww update updates-rev=false" 
		(box 
			:space-evenly false
			(eventbox
				:cursor "pointer"
				(button 
					:class "updates-icon" 
					:onclick "updates --up"
					:timeout "3s"
					:tooltip "click to update"
					"󰮯"
				)
			)	
			(revealer 
				:transition "slideright" 
				:reveal updates-rev 
				:duration "300ms"
				(label 
					:class "updates-text" 
					:text updates
				)
			)
		)
	)
)

(defwidget network []
	(eventbox 
		:onhover "eww update network-rev=true" 
		:onhoverlost "eww update network-rev=false"
		(box 
			:space-evenly false		
			(button 
				:class "network-icon" 
				:style {network-status == "down" ? "color: #dd6777;" : "color: #A39EC4;"}
				{network-status == "up" ? "" : ""}
			)
			(revealer 
				:transition "slideleft" 
				:reveal network-rev 
				:duration "300ms"
				(label 
					:class "network-text" 
					:text  "${round(EWW_NET.enp4s0.NET_DOWN / 1000000, 2)}MB"
				)
			)
		)
	)
)

(defwidget volume []
	(eventbox 
		:onhover "eww update volume-rev=true" 
		:onhoverlost "eww update volume-rev=false"
		(box 
			:space-evenly false
			(eventbox
				:cursor "pointer"
				(button 
					:class "volume-icon" 
					:style {volume-percent == 0 || volume-percent == "muted" ? "color: #dd6777;" : "color: #9ec49f;"} 
					:tooltip {volume-percent == "muted" ? "Muted" : "${volume-percent}%" } 
					:onclick "pamixer -t" 
					{volume-percent == 0 || volume-percent == "muted" ? "" : 
					volume-percent < 30 ? "" : 
					volume-percent < 75 ? "" : ""}
				)
			)
			(revealer 
				:class "volume-bar"
				:transition "slideleft" 
				:reveal volume-rev 
				:duration "500ms"
				(eventbox
					:cursor "pointer"
					:valign "center"
					(scale  
						:tooltip {volume-percent == "muted" ? "Muted" : "${volume-percent}%"}
						:value {volume-percent == "muted" ? "0" : volume-percent}  
						:min 0 
						:max 101 
						:onchange "pamixer -u && pamixer --set-volume {}"
					)
				)
			)
		)
	)
)

(defwidget notifications-icon []
	(box
		:class "notification-icon-box"
		:space-evenly false
		(eventbox
			:cursor "pointer"
			(button
				:class "notification-icon"
				:onclick "eww -c $HOME/.config/eww/notifications open --toggle notifications"
				{notifications-dnd ? "" : ""}
			)
		)
		(revealer 
			:reveal {dunst-count == "0" ? "false" : "true"}
			:transition "slideleft"
			(label
				:class "notification-count"
				:text dunst-count
				:style "margin-left: .5rem;"
			)
		)
	)
)

(defwidget clock []
	(box
		:orientation "v"
		:space-evenly false
		(box
			:space-evenly false
			:spacing 15
			:halign "end"
			(label
				:style "font-size: 1.2rem; color: ${weather-color};"
				:text weather-icon
			)
			(box 
				:class "clock" 
				:space-evenly false 
				:spacing 8
				:halign "end"
				(label 
					:class "clock-hour" 
					:text {formattime(EWW_TIME, "%H", "America/Edmonton")}
				)
				(label 
					:class "clock-separator" 
					:text ""
				)
				(label 
					:class "clock-minute" 
					:text {formattime(EWW_TIME, "%M", "America/Edmonton")}
				)
			)
		)
		(label
			:text {formattime(EWW_TIME, "%A, %B %d", "America/Edmonton")}
			:style "font-weight: 500;"
		)
	)
)
	

(defwidget group []
	(box 
		:class "group"
		:space-evenly false
		:spacing 15
		(updates)
		(network)
		(volume)
	)
)

(defwidget left []
	(box 
		:space-evenly false 
		:halign "start" 
		:spacing 15
		(powermenu-icon)
		(bsp-layout)
		(workspaces)
		(windowtitle)
	)
)

(defwidget center []
	(box 
		:halign "center"
		(music)
	)
)

(defwidget right []
	(box 
		:space-evenly false 
		:halign "end" 
		:spacing 15
		(group)
		(notifications-icon)
		(eventbox :cursor "pointer" 
			(button :onclick "eww -c $HOME/.config/eww/calendar open --toggle calendar" (clock))
		)
	)
)

(defwidget bar []
	(box 
		:class "bar"
		(left)
		(center)
		(right)
	)
)

(defwindow bar
	:wm-ignore false
	:windowtype "dock"
	:reserve (struts :distance "75px" :side "bottom")
	:geometry (geometry :width "100%" :anchor "center bottom")
	(bar)
)
